result <- geocode_osm(loc)
if (!is.null(result)) {
longitude <- append(longitude,result[1])
latitude <- append(latitude,result[2])
map <- map %>%
addMarkers(
lng = result[1],
lat = result[2],
popup = paste("Location: ", loc)
)
marker_data <- rbind(marker_data, result)
}
}
if (!is.null(marker_data)) {
map <- map %>% fitBounds(
lng1 = min(marker_data[, 1]),
lat1 = min(marker_data[, 2]),
lng2 = max(marker_data[, 1]),
lat2 = max(marker_data[, 2])
)
}
# Display the map
map
print(map)
stations <- as.data.frame(cbind(longitude, latitude))
return_list <- list(locations = locations, temperatures = temperatures, stations = stations)
return(return_list)
}
scraper()
mark_locations_data <- mark_locations()
locations <- mark_locations_data$locations
stations <- mark_locations_data$stations
temperatures <- mark_locations_data$temperatures
stanice <- data.frame(
x = stations$longitude,
y = stations$latitude,
temperature = temperatures
)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS(projargs = "+init=epsg:32631"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1))
samp = sp::spsample(x = croatia_shapefile, n = 1000, type = "random")
samp = sp::spsample(x = spatial_points, n = 1000, type = "random")
croatia_shapefile <- read_sf(paste0(getwd(),"/hr_1km.shp"))
setwd("~/Developer/faks/lokacije")
croatia_shapefile <- read_sf(paste0(getwd(),"/hr_1km.shp"))
croatia_OGR <- readOGR(paste0(getwd(),"/hr_1km.shp"))
croatia_OGR <- st_read(paste0(getwd(),"/hr_1km.shp"))
samp = sp::spsample(x = croatia_OGR, n = 1000, type = "random")
library(sf)
library(leaflet)
library(osmdata)
library(rvest)
library(dplyr)
library(lubridate)
library(tmaptools)
library(sp)
library(raster)
library(gstat)
library(tmap)
library(spatstat)
library(raster)
install.packages("rgdal")
data_directory <- paste0(getwd(),"/data")
croatia_shapefile <- read_sf(paste0(getwd(),"/hr_1km.shp"))
scraper <- function() {
if (length(list.files(data_directory)) > 0){
return()
}
current_time <- Sys.time()
start_hour <- hour(current_time)
end_hour <- start_hour + 23
count <- 0
for (i in start_hour:end_hour) {
current_value <- i %% 24  # Wrap around to 0 when it exceeds 23
if (nchar(as.character(current_value)) == 1){
current_value <- paste0("0",current_value)
}
url <- paste0("https://meteo.hr/podaci.php?section=podaci_vrijeme&param=hrvatska1_n&sat=",current_value)
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table data using CSS selectors
table_data <- webpage %>%
html_table(fill = TRUE)
# Assuming the table of interest is the first one on the page
table_df <- table_data[[1]]
if (!file.exists(data_directory)){
dir.create(data_directory, recursive = TRUE)
}
# Save the table data to a CSV file
file_name = paste0(data_directory, "/table_data_",as.character(count), "_",current_value , ".csv")
write.csv(table_df,file_name , row.names = FALSE)
count <- count + 1
}
}
mark_locations <- function() {
#Load csv file
csv_data <- read.csv(paste0(data_directory,"/",list.files(data_directory)[1]))
locations <- csv_data[,1]
temperatures <- csv_data[,4]
replace_characters <- function(text) {
if(text == "Puntijarka (Medvednica)"){
text <- "Medvednica"
}
if(startsWith(text,"Gorice")){
text <- "Gorice Brod Posavina"
}
text <- gsub("č", "c", text)
text <- gsub("ć", "c", text)
text <- gsub("š", "s", text)
text <- gsub("đ", "d", text)
text <- gsub("ž", "z", text)
text <- gsub("Č", "C", text)
text <- gsub("Ć", "C", text)
text <- gsub("Š", "S", text)
text <- gsub("Đ", "D", text)
text <- gsub("Ž", "Z", text)
words <- unlist(strsplit(text, " "))
if (length(words) > 0 && words[length(words)] == "A") {
words <- words[-length(words)]
text <- paste(words, collapse = " ")
}
text <- paste(text, "Croatia")
return(text)
}
locations <- lapply(locations,replace_characters)
# Function to geocode location using OSM Nominatim
geocode_osm <- function(location) {
osm_query <- tmaptools::geocode_OSM(location)
if (!is.null(osm_query) && !any(is.na(osm_query[c("x", "y")]))) {
return(c(osm_query$coords[[1]], osm_query$coords[[2]]))
} else {
return(NULL)
}
}
# Create a map
map <- leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 30, zoom = 2)
longitude <- c()
latitude <- c()
# Add markers for each location
marker_data <- NULL
for (loc in locations) {
result <- geocode_osm(loc)
if (!is.null(result)) {
longitude <- append(longitude,result[1])
latitude <- append(latitude,result[2])
map <- map %>%
addMarkers(
lng = result[1],
lat = result[2],
popup = paste("Location: ", loc)
)
marker_data <- rbind(marker_data, result)
}
}
if (!is.null(marker_data)) {
map <- map %>% fitBounds(
lng1 = min(marker_data[, 1]),
lat1 = min(marker_data[, 2]),
lng2 = max(marker_data[, 1]),
lat2 = max(marker_data[, 2])
)
}
# Display the map
map
print(map)
stations <- as.data.frame(cbind(longitude, latitude))
return_list <- list(locations = locations, temperatures = temperatures, stations = stations)
return(return_list)
}
scraper()
mark_locations_data <- mark_locations()
locations <- mark_locations_data$locations
stations <- mark_locations_data$stations
temperatures <- mark_locations_data$temperatures
stanice <- data.frame(
x = stations$longitude,
y = stations$latitude,
temperature = temperatures
)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS(projargs = "+init=epsg:32631"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
locations <- mark_locations_data$locations
stations <- mark_locations_data$stations
temperatures <- mark_locations_data$temperatures
stanice <- data.frame(
x = stations$longitude,
y = stations$latitude,
temperature = temperatures
)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS(projargs = "+init=epsg:32631"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
# Extract the kriged values
kriged_values <- as.data.frame(krig)
# Create a spatial points data frame for kriged values
kriged_points <- SpatialPointsDataFrame(
coords = kriged_values[, c("x", "y")],
data = kriged_values[, "var1.pred"],
proj4string = sp::CRS("+proj=longlat +datum=WGS84")
)
print(kriged_values[,"var1.pred"])
View(krig)
rm(list=ls())
library(sf)
library(leaflet)
library(osmdata)
library(rvest)
library(dplyr)
library(lubridate)
library(tmaptools)
library(sp)
library(raster)
library(gstat)
library(tmap)
library(spatstat)
library(raster)
data_directory <- paste0(getwd(),"/data")
croatia_shapefile <- read_sf(paste0(getwd(),"/hr_1km.shp"))
scraper <- function() {
if (length(list.files(data_directory)) > 0){
return()
}
current_time <- Sys.time()
start_hour <- hour(current_time)
end_hour <- start_hour + 23
count <- 0
for (i in start_hour:end_hour) {
current_value <- i %% 24  # Wrap around to 0 when it exceeds 23
if (nchar(as.character(current_value)) == 1){
current_value <- paste0("0",current_value)
}
url <- paste0("https://meteo.hr/podaci.php?section=podaci_vrijeme&param=hrvatska1_n&sat=",current_value)
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table data using CSS selectors
table_data <- webpage %>%
html_table(fill = TRUE)
# Assuming the table of interest is the first one on the page
table_df <- table_data[[1]]
if (!file.exists(data_directory)){
dir.create(data_directory, recursive = TRUE)
}
# Save the table data to a CSV file
file_name = paste0(data_directory, "/table_data_",as.character(count), "_",current_value , ".csv")
write.csv(table_df,file_name , row.names = FALSE)
count <- count + 1
}
}
mark_locations <- function() {
#Load csv file
csv_data <- read.csv(paste0(data_directory,"/",list.files(data_directory)[1]))
locations <- csv_data[,1]
temperatures <- csv_data[,4]
replace_characters <- function(text) {
if(text == "Puntijarka (Medvednica)"){
text <- "Medvednica"
}
if(startsWith(text,"Gorice")){
text <- "Gorice Brod Posavina"
}
text <- gsub("č", "c", text)
text <- gsub("ć", "c", text)
text <- gsub("š", "s", text)
text <- gsub("đ", "d", text)
text <- gsub("ž", "z", text)
text <- gsub("Č", "C", text)
text <- gsub("Ć", "C", text)
text <- gsub("Š", "S", text)
text <- gsub("Đ", "D", text)
text <- gsub("Ž", "Z", text)
words <- unlist(strsplit(text, " "))
if (length(words) > 0 && words[length(words)] == "A") {
words <- words[-length(words)]
text <- paste(words, collapse = " ")
}
text <- paste(text, "Croatia")
return(text)
}
locations <- lapply(locations,replace_characters)
# Function to geocode location using OSM Nominatim
geocode_osm <- function(location) {
osm_query <- tmaptools::geocode_OSM(location)
if (!is.null(osm_query) && !any(is.na(osm_query[c("x", "y")]))) {
return(c(osm_query$coords[[1]], osm_query$coords[[2]]))
} else {
return(NULL)
}
}
# Create a map
map <- leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 30, zoom = 2)
longitude <- c()
latitude <- c()
# Add markers for each location
marker_data <- NULL
for (loc in locations) {
result <- geocode_osm(loc)
if (!is.null(result)) {
longitude <- append(longitude,result[1])
latitude <- append(latitude,result[2])
map <- map %>%
addMarkers(
lng = result[1],
lat = result[2],
popup = paste("Location: ", loc)
)
marker_data <- rbind(marker_data, result)
}
}
if (!is.null(marker_data)) {
map <- map %>% fitBounds(
lng1 = min(marker_data[, 1]),
lat1 = min(marker_data[, 2]),
lng2 = max(marker_data[, 1]),
lat2 = max(marker_data[, 2])
)
}
# Display the map
map
print(map)
stations <- as.data.frame(cbind(longitude, latitude))
return_list <- list(locations = locations, temperatures = temperatures, stations = stations)
return(return_list)
}
scraper()
mark_locations_data <- mark_locations()
locations <- mark_locations_data$locations
stations <- mark_locations_data$stations
temperatures <- mark_locations_data$temperatures
stanice <- data.frame(
x = stations$longitude,
y = stations$latitude,
temperature = temperatures
)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS(projargs = "+init=epsg:32631"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
View(krig)
View(spatial_points)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1), crs = st_crs(spatial_points))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS(projargs = "+init=epsg:32631"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1), crs = st_crs(spatial_points))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
min(krig$var1.pred)
max(krig$var1.pred)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 20, nugget = 20, range = 10000, model = "Gau"))
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 100, nugget = 20, range = 10000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1), crs = st_crs(spatial_points))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
rm(list=ls())
library(sf)
library(leaflet)
library(osmdata)
library(rvest)
library(dplyr)
library(lubridate)
library(tmaptools)
library(sp)
library(raster)
library(gstat)
library(tmap)
library(spatstat)
library(raster)
install.packages("rgdal")
data_directory <- paste0(getwd(),"/data")
croatia_shapefile <- read_sf("/Users/frangrenko/Developer/faks/lokacije/hr_1km.shp")
scraper <- function() {
if (length(list.files(data_directory)) > 0){
return()
}
current_time <- Sys.time()
start_hour <- hour(current_time)
end_hour <- start_hour + 23
count <- 0
for (i in start_hour:end_hour) {
current_value <- i %% 24  # Wrap around to 0 when it exceeds 23
if (nchar(as.character(current_value)) == 1){
current_value <- paste0("0",current_value)
}
url <- paste0("https://meteo.hr/podaci.php?section=podaci_vrijeme&param=hrvatska1_n&sat=",current_value)
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table data using CSS selectors
table_data <- webpage %>%
html_table(fill = TRUE)
# Assuming the table of interest is the first one on the page
table_df <- table_data[[1]]
if (!file.exists(data_directory)){
dir.create(data_directory, recursive = TRUE)
}
# Save the table data to a CSV file
file_name = paste0(data_directory, "/table_data_",as.character(count), "_",current_value , ".csv")
write.csv(table_df,file_name , row.names = FALSE)
count <- count + 1
}
}
mark_locations <- function() {
#Load csv file
csv_data <- read.csv(paste0(data_directory,"/",list.files(data_directory)[1]))
locations <- csv_data[,1]
temperatures <- csv_data[,4]
replace_characters <- function(text) {
if(text == "Puntijarka (Medvednica)"){
text <- "Medvednica"
}
if(startsWith(text,"Gorice")){
text <- "Gorice Brod Posavina"
}
text <- gsub("č", "c", text)
text <- gsub("ć", "c", text)
text <- gsub("š", "s", text)
text <- gsub("đ", "d", text)
text <- gsub("ž", "z", text)
text <- gsub("Č", "C", text)
text <- gsub("Ć", "C", text)
text <- gsub("Š", "S", text)
text <- gsub("Đ", "D", text)
text <- gsub("Ž", "Z", text)
words <- unlist(strsplit(text, " "))
if (length(words) > 0 && words[length(words)] == "A") {
words <- words[-length(words)]
text <- paste(words, collapse = " ")
}
text <- paste(text, "Croatia")
return(text)
}
locations <- lapply(locations,replace_characters)
# Function to geocode location using OSM Nominatim
geocode_osm <- function(location) {
osm_query <- tmaptools::geocode_OSM(location)
if (!is.null(osm_query) && !any(is.na(osm_query[c("x", "y")]))) {
return(c(osm_query$coords[[1]], osm_query$coords[[2]]))
} else {
return(NULL)
}
}
# Create a map
map <- leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 30, zoom = 2)
longitude <- c()
latitude <- c()
# Add markers for each location
marker_data <- NULL
for (loc in locations) {
result <- geocode_osm(loc)
if (!is.null(result)) {
longitude <- append(longitude,result[1])
latitude <- append(latitude,result[2])
map <- map %>%
addMarkers(
lng = result[1],
lat = result[2],
popup = paste("Location: ", loc)
)
marker_data <- rbind(marker_data, result)
}
}
if (!is.null(marker_data)) {
map <- map %>% fitBounds(
lng1 = min(marker_data[, 1]),
lat1 = min(marker_data[, 2]),
lng2 = max(marker_data[, 1]),
lat2 = max(marker_data[, 2])
)
}
# Display the map
map
print(map)
stations <- as.data.frame(cbind(longitude, latitude))
return_list <- list(locations = locations, temperatures = temperatures, stations = stations)
return(return_list)
}
scraper()
mark_locations_data <- mark_locations()
locations <- mark_locations_data$locations
stations <- mark_locations_data$stations
temperatures <- mark_locations_data$temperatures
stanice <- data.frame(
x = stations$longitude,
y = stations$latitude,
temperature = temperatures
)
spatial_points = sp::SpatialPointsDataFrame(coords = cbind(stanice$x, stanice$y), data = stanice, proj4string = sp::CRS(projargs = "+init=epsg:32631"))
var = gstat::variogram(object = temperature~1, locations = spatial_points)
fit_var = gstat::fit.variogram(object = var, model = gstat::vgm(psill = 10.1, nugget = 3.7, range = 90000, model = "Gau"))
grid_cells <- st_make_grid(st_bbox(spatial_points), cellsize = c(0.1, 0.1))
samp = sp::spsample(x = croatia_shapefile, n = 1000, type = "random")
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
grid_cells <- st_make_grid(spatial_points, cellsize = c(0.1, 0.1))
krig = gstat::krige(formula = temperature~1, locations = spatial_points, newdata = grid_cells, model = fit_var)
krig$var1.pred
